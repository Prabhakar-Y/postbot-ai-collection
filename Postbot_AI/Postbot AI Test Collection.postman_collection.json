{
	"info": {
		"_postman_id": "13ec90ca-68f6-4ba9-9f13-6d31da3e94f0",
		"name": "Postbot AI Test Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37519210"
	},
	"item": [
		{
			"name": "GET  - Postbot AI",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    ",
							"    responseData.forEach(user => {",
							"        pm.expect(user).to.have.property('id').that.is.a('number');",
							"        pm.expect(user).to.have.property('name').that.is.a('string');",
							"        pm.expect(user).to.have.property('username').that.is.a('string');",
							"        pm.expect(user).to.have.property('email').that.is.a('string');",
							"        pm.expect(user).to.have.property('address').that.is.an('object');",
							"        pm.expect(user).to.have.property('phone').that.is.a('string');",
							"        pm.expect(user).to.have.property('website').that.is.a('string');",
							"        pm.expect(user).to.have.property('company').that.is.an('object');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Email is in a valid format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    ",
							"    responseData.forEach(function(user) {",
							"        pm.expect(user.email).to.match(/^.+@.+\\..+$/);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Validate the address object structure\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"    ",
							"    responseData.forEach(function(user) {",
							"        pm.expect(user).to.have.property('address').that.is.an('object').and.to.have.property('street').that.is.a('string');",
							"        pm.expect(user.address).to.have.property('suite').that.is.a('string');",
							"        pm.expect(user.address).to.have.property('city').that.is.a('string');",
							"        pm.expect(user.address).to.have.property('zipcode').that.is.a('string');",
							"        pm.expect(user.address).to.have.property('geo').that.is.an('object').and.to.have.property('lat').that.is.a('string');",
							"        pm.expect(user.address.geo).to.have.property('lng').that.is.a('string');",
							"    });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users"
					]
				},
				"description": "### GET /users\n\nThis endpoint retrieves a list of users.\n\n#### Request\n\nNo request body is required for this endpoint.\n\n#### Response\n\nThe response will be a JSON array containing user objects with the following properties:\n\n- `id` (number): The unique identifier of the user.\n    \n- `name` (string): The name of the user.\n    \n- `username` (string): The username of the user.\n    \n- `email` (string): The email address of the user.\n    \n- `address` (object): The address object containing the following properties:\n    \n    - `street` (string): The street name of the user's address.\n        \n    - `suite` (string): The suite number of the user's address.\n        \n    - `city` (string): The city of the user's address.\n        \n    - `zipcode` (string): The zip code of the user's address.\n        \n    - `geo` (object): The geographical coordinates of the user's address with the following properties:\n        \n        - `lat` (string): The latitude of the user's address.\n            \n        - `lng` (string): The longitude of the user's address.\n            \n- `phone` (string): The phone number of the user.\n    \n- `website` (string): The website of the user.\n    \n- `company` (object): The company object containing the following properties:\n    \n    - `name` (string): The name of the company the user works for.\n        \n    - `catchPhrase` (string): The catch phrase of the company.\n        \n    - `bs` (string): The business strategy of the company.\n        \n\n#### JSON Schema\n\n``` json\n[\n  {\n    \"type\": \"object\",\n    \"properties\": {\n      \"id\": { \"type\": \"number\" },\n      \"name\": { \"type\": \"string\" },\n      \"username\": { \"type\": \"string\" },\n      \"email\": { \"type\": \"string\" },\n      \"address\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"street\": { \"type\": \"string\" },\n          \"suite\": { \"type\": \"string\" },\n          \"city\": { \"type\": \"string\" },\n          \"zipcode\": { \"type\": \"string\" },\n          \"geo\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"lat\": { \"type\": \"string\" },\n              \"lng\": { \"type\": \"string\" }\n            }\n          }\n        }\n      },\n      \"phone\": { \"type\": \"string\" },\n      \"website\": { \"type\": \"string\" },\n      \"company\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"name\": { \"type\": \"string\" },\n          \"catchPhrase\": { \"type\": \"string\" },\n          \"bs\": { \"type\": \"string\" }\n        }\n      }\n    }\n  }\n]\n\n ```"
			},
			"response": []
		},
		{
			"name": "POST - Postbot AI",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response body includes id and username fields\", function () {",
							"    const responseData = pm.response.json();",
							"    responseData.forEach(function(user) {",
							"        pm.expect(user).to.have.property('id');",
							"        pm.expect(user).to.have.property('username');",
							"    });",
							"});",
							"",
							"pm.test(\"Response Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Name and email fields are present in the response\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData).to.have.property('name');",
							"  pm.expect(responseData).to.have.property('email');",
							"});",
							"",
							"",
							"pm.test(\"ID is a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.id).to.be.a('number');",
							"  pm.expect(responseData.id).to.be.at.least(0, \"ID should be a non-negative integer\");",
							"});",
							"",
							"",
							"pm.test(\"Username is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.username).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Username should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Response includes the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.include.all.keys('name', 'username', 'email', 'id');",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const randomUsername = `user_${Math.random().toString(36).substring(7)}`;",
							"pm.environment.set(\"randomUsername\", randomUsername);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"John Doe\",\n  \"username\": \"{{randomUsername}}\",\n  \"email\": \"johndoe@example.com\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users"
					]
				},
				"description": "### Create a New User\n\nThis endpoint allows you to create a new user.\n\n#### Required Fields\n\n- `name` (string): The name of the user.\n    \n- `username` (string): The username of the user.\n    \n- `email` (string): The email of the user.\n    \n\n#### Expected Response\n\nUpon successful creation, the server will respond with a status code of 201 and a JSON object containing the details of the newly created user, including the `id` assigned to the user.\n\nExample Response:\n\n``` json\n{\n    \"name\": \"example\",\n    \"username\": \"example123\",\n    \"email\": \"example@example.com\",\n    \"id\": 123\n}\n\n ```"
			},
			"response": []
		},
		{
			"name": "PUT-Postbot AI",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response body includes the updated name and username fields\", function () {",
							"  var responseJson = pm.response.json();",
							"  pm.expect(responseJson).to.have.property('name');",
							"  pm.expect(responseJson).to.have.property('username');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const randomEmail = `user_${Math.random().toString(36).substring(7)}@example.com`;",
							"pm.environment.set(\"randomEmail\", randomEmail);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Jane Doe\",\n  \"username\": \"janedoe\",\n  \"email\": \"{{randomEmail}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"1"
					]
				},
				"description": "This endpoint allows updating user information using the HTTP PUT method. The request should be made to [https://jsonplaceholder.typicode.com/users/1](https://jsonplaceholder.typicode.com/users/1).\n\n### Request Body\n\nThe request body should be in raw JSON format and include the following parameters:\n\n- `name`: (string) The name of the user.\n    \n- `username`: (string) The username of the user.\n    \n- `email`: (string) The email address of the user.\n    \n\n### Response\n\nThe response will have a status code of 200 and a content type of application/json. The response body will be a JSON object with the following schema:\n\n``` json\n{\n  \"name\": \"\",\n  \"username\": \"\",\n  \"email\": \"\",\n  \"id\": 0\n}\n\n ```\n\nThis JSON schema represents the structure of the response object, where `name`, `username`, and `email` are strings, and `id` is a number."
			},
			"response": []
		},
		{
			"name": "DELETE - Postbot AI",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verify the response status code is 200",
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"// Verify the response body is empty or indicates successful deletion",
							"pm.test(\"Response body indicates successful deletion or is empty\", function () {",
							"  const responseBody = pm.response.json();",
							"  pm.expect(responseBody).to.be.empty.or.to.deep.include({ message: \"User deleted successfully\" });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"1"
					]
				},
				"description": "### Delete User\n\nThis endpoint is used to delete a specific user.\n\n#### Request\n\n- Method: DELETE\n    \n- Endpoint: `https://jsonplaceholder.typicode.com/users/1`\n    \n\n#### Response\n\nThe response for this request is an empty JSON object.\n\n#### Response Schema\n\n``` json\n{}\n\n ```"
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "randomEmail",
			"value": ""
		}
	]
}